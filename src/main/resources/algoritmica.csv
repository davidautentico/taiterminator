Pregunta;Opción 1;Opción 2;Opción 3;Opción 4;Respuesta Correcta;Referencia
¿Qué es la complejidad temporal de un algoritmo?;El tiempo que tarda un algoritmo en ejecutarse en función del tamaño de la entrada;La cantidad de memoria que utiliza un algoritmo;La cantidad de operaciones que realiza un algoritmo;La cantidad de líneas de código que tiene un algoritmo;0;https://en.wikipedia.org/wiki/Time_complexity
¿Cuál de las siguientes afirmaciones sobre la complejidad temporal es correcta?;Un algoritmo con complejidad O(n) es más eficiente que un algoritmo con complejidad O(n^2);Un algoritmo con complejidad O(n^2) siempre es más rápido que uno con complejidad O(n log n);Un algoritmo con complejidad O(1) siempre es más lento que uno con complejidad O(n);Un algoritmo con complejidad O(n log n) siempre tiene mejor rendimiento que uno con complejidad O(n);0;https://en.wikipedia.org/wiki/Time_complexity
¿Qué es la complejidad espacial de un algoritmo?;La cantidad de memoria que utiliza un algoritmo en función del tamaño de la entrada;El tiempo que tarda un algoritmo en ejecutarse en función del tamaño de la entrada;La cantidad de operaciones que realiza un algoritmo;La cantidad de líneas de código que tiene un algoritmo;0;https://en.wikipedia.org/wiki/Space_complexity
¿Cuál de las siguientes afirmaciones sobre la complejidad espacial es correcta?;Un algoritmo con complejidad O(n) siempre utiliza menos memoria que uno con complejidad O(log n);Un algoritmo con complejidad O(log n) siempre utiliza menos memoria que uno con complejidad O(n);La complejidad espacial de un algoritmo es independiente del tamaño de la entrada;Un algoritmo con complejidad O(1) utiliza más memoria que uno con complejidad O(n);0;https://en.wikipedia.org/wiki/Space_complexity
¿Qué es la notación Big O (O) utilizada para describir la complejidad de un algoritmo?;Describe el límite superior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe el número exacto de operaciones que realiza un algoritmo;Describe el número exacto de líneas de código que tiene un algoritmo;Describe la cantidad de memoria que utiliza un algoritmo;0;https://en.wikipedia.org/wiki/Big_O_notation
¿Cuál de las siguientes afirmaciones describe mejor la notación Big O (O)?;O(n) representa una complejidad lineal, donde el tiempo o espacio requerido crece proporcionalmente al tamaño de la entrada;O(n!) representa una complejidad exponencial, donde el tiempo o espacio requerido crece exponencialmente con el tamaño de la entrada;O(log n) representa una complejidad cuadrática, donde el tiempo o espacio requerido crece cuadráticamente con el tamaño de la entrada;O(1) representa una complejidad logarítmica, donde el tiempo o espacio requerido crece de forma logarítmica con el tamaño de la entrada;0;https://en.wikipedia.org/wiki/Big_O_notation
¿Cuál es la complejidad temporal promedio del algoritmo de ordenación Quick Sort en el peor caso?;O(n^2);O(n log n);O(n);O(1);0;https://en.wikipedia.org/wiki/Quicksort
¿Cuál es la complejidad temporal promedio del algoritmo de ordenación Merge Sort?;O(n log n);O(n);O(1);O(n^2);0;https://en.wikipedia.org/wiki/Merge_sort
¿Qué caracteriza a un algoritmo recursivo?;Se llama a sí mismo directa o indirectamente en su definición;No utiliza funciones auxiliares;Siempre tiene una complejidad temporal de O(1);Es menos eficiente que un algoritmo iterativo;0;https://en.wikipedia.org/wiki/Recursion_(computer_science)
¿Cuál es la principal ventaja de los algoritmos recursivos?;Pueden ser más simples de entender e implementar en ciertos casos;Siempre tienen mejor rendimiento que los algoritmos iterativos;Son menos propensos a errores que los algoritmos iterativos;Requieren menos memoria que los algoritmos iterativos;0;https://en.wikipedia.org/wiki/Recursion_(computer_science)
¿Qué es un algoritmo de búsqueda binaria?;Un algoritmo eficiente para encontrar un elemento en una lista ordenada dividiendo repetidamente la búsqueda a la mitad;Un algoritmo que busca secuencialmente desde el principio de una lista hasta el final;Un algoritmo que utiliza técnicas de hashing para encontrar un elemento en una tabla;Un algoritmo que calcula la suma de todos los elementos de una lista;0;https://en.wikipedia.org/wiki/Binary_search_algorithm
¿Cuál es la complejidad temporal del algoritmo de búsqueda binaria?;O(log n);O(n);O(n log n);O(1);0;https://en.wikipedia.org/wiki/Binary_search_algorithm
¿Qué caracteriza a un algoritmo de fuerza bruta?;Evalúa sistemáticamente todas las posibles soluciones;Utiliza heurísticas para optimizar la búsqueda;Es más rápido que otros algoritmos;No gestiona bien la memoria;0;https://en.wikipedia.org/wiki/Brute-force_search
¿Cuál es la principal desventaja de los algoritmos de fuerza bruta?;Tienen una complejidad temporal alta;Son más simples de implementar que otros algoritmos;Son menos propensos a errores que otros algoritmos;Requieren menos recursos de memoria que otros algoritmos;0;https://en.wikipedia.org/wiki/Brute-force_search
¿Qué es la complejidad temporal en el mejor caso de un algoritmo?;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo promedio que tarda un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el peor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Qué es la complejidad temporal en el peor caso de un algoritmo?;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo promedio que tarda un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el mejor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Qué es la complejidad temporal en el caso promedio de un algoritmo?;El tiempo promedio que tarda un algoritmo en ejecutarse sobre todas las posibles entradas;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el peor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Qué es la complejidad temporal asintótica de un algoritmo?;El límite superior del tiempo de ejecución del algoritmo cuando el tamaño de la entrada tiende a infinito;La cantidad exacta de tiempo que tarda un algoritmo en ejecutarse para una entrada específica;El número de operaciones que realiza un algoritmo en función del tamaño de la entrada;La cantidad de memoria que utiliza un algoritmo en función del tamaño de la entrada;0;https://en.wikipedia.org/wiki/Asymptotic_analysis
¿Qué es la notación Theta (Θ) utilizada para describir la complejidad de un algoritmo?;Describe tanto el límite inferior como el superior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe el límite superior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe el límite inferior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe la cantidad exacta de operaciones que realiza un algoritmo;0;https://en.wikipedia.org/wiki/Big_O_notation
¿Cuál es la principal diferencia entre la notación Big O (O) y la notación Omega (Ω)?;Big O (O) describe el límite superior asintótico, mientras que Omega (Ω) describe el límite inferior asintótico del tiempo o espacio que necesita un algoritmo;Omega (Ω) describe el límite superior asintótico, mientras que Big O (O) describe el límite inferior asintótico del tiempo o espacio que necesita un algoritmo;Big O (O) y Omega (Ω) son equivalentes y se utilizan indistintamente para describir la complejidad de un algoritmo;Big O (O) se utiliza para algoritmos iterativos, mientras que Omega (Ω) se utiliza para algoritmos recursivos;0;https://en.wikipedia.org/wiki/Big_O_notation
¿Qué es la complejidad temporal en el caso promedio de un algoritmo?;El tiempo promedio que tarda un algoritmo en ejecutarse sobre todas las posibles entradas;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el peor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Cuál de las siguientes afirmaciones sobre la complejidad temporal es correcta?;Un algoritmo con complejidad O(n) es más eficiente que un algoritmo con complejidad O(n^2);Un algoritmo con complejidad O(n^2) siempre es más rápido que uno con complejidad O(n log n);Un algoritmo con complejidad O(1) siempre es más lento que uno con complejidad O(n);Un algoritmo con complejidad O(n log n) siempre tiene mejor rendimiento que uno con complejidad O(n);0;https://en.wikipedia.org/wiki/Time_complexity
¿Qué es la notación Big O (O) utilizada para describir la complejidad de un algoritmo?;Describe el límite superior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe el número exacto de operaciones que realiza un algoritmo;Describe el número exacto de líneas de código que tiene un algoritmo;Describe la cantidad de memoria que utiliza un algoritmo;0;https://en.wikipedia.org/wiki/Big_O_notation
¿Qué es la complejidad espacial de un algoritmo?;La cantidad de memoria que utiliza un algoritmo en función del tamaño de la entrada;El tiempo que tarda un algoritmo en ejecutarse en función del tamaño de la entrada;La cantidad de operaciones que realiza un algoritmo;La cantidad de líneas de código que tiene un algoritmo;0;https://en.wikipedia.org/wiki/Space_complexity
¿Cuál de las siguientes afirmaciones sobre la complejidad espacial es correcta?;Un algoritmo con complejidad O(n) siempre utiliza menos memoria que uno con complejidad O(log n);Un algoritmo con complejidad O(log n) siempre utiliza menos memoria que uno con complejidad O(n);La complejidad espacial de un algoritmo es independiente del tamaño de la entrada;Un algoritmo con complejidad O(1) utiliza más memoria que uno con complejidad O(n);0;https://en.wikipedia.org/wiki/Space_complexity
¿Qué es la complejidad temporal en el mejor caso de un algoritmo?;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo promedio que tarda un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el peor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Qué es la complejidad temporal en el peor caso de un algoritmo?;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo promedio que tarda un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el mejor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Qué es la complejidad temporal en el caso promedio de un algoritmo?;El tiempo promedio que tarda un algoritmo en ejecutarse sobre todas las posibles entradas;La menor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La mayor cantidad de tiempo que puede tardar un algoritmo en ejecutarse;La cantidad de tiempo que tarda un algoritmo en ejecutarse en el peor caso;0;https://en.wikipedia.org/wiki/Best,_worst_and_average_case
¿Qué es la complejidad temporal asintótica de un algoritmo?;El límite superior del tiempo de ejecución del algoritmo cuando el tamaño de la entrada tiende a infinito;La cantidad exacta de tiempo que tarda un algoritmo en ejecutarse para una entrada específica;El número de operaciones que realiza un algoritmo en función del tamaño de la entrada;La cantidad de memoria que utiliza un algoritmo en función del tamaño de la entrada;0;https://en.wikipedia.org/wiki/Asymptotic_analysis
¿Qué es la notación Theta (Θ) utilizada para describir la complejidad de un algoritmo?;Describe tanto el límite inferior como el superior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe el límite superior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe el límite inferior asintótico del tiempo o espacio que necesita un algoritmo en función del tamaño de la entrada;Describe la cantidad exacta de operaciones que realiza un algoritmo;0;https://en.wikipedia.org/wiki/Big_O_notation
¿Cuál es la principal diferencia entre la notación Big O (O) y la notación Omega (Ω)?;Big O (O) describe el límite superior asintótico, mientras que Omega (Ω) describe el límite inferior asintótico del tiempo o espacio que necesita un algoritmo;Omega (Ω) describe el límite superior asintótico, mientras que Big O (O) describe el límite inferior asintótico del tiempo o espacio que necesita un algoritmo;Big O (O) y Omega (Ω) son equivalentes y se utilizan indistintamente para describir la complejidad de un algoritmo;Big O (O) se utiliza para algoritmos iterativos, mientras que Omega (Ω) se utiliza para algoritmos recursivos;0;https://en.wikipedia.org/wiki/Big_O_notation
